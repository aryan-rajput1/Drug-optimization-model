# -*- coding: utf-8 -*-
"""DrugOpt.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QhmgMXs6eD2ZaVdpowNv-i1r2pI6f863
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

pip install pandas-profiling

import sys
!{sys.executable} -m pip install pandas-profiling

from sklearn.model_selection import train_test_split

from pandas_profiling import ProfileReport

df = pd.read_csv('/content/drugData.csv').sample(frac = 1) # Randomizing data

df.head()

df['Drug'].value_counts()

sns.countplot(x ='Drug', data = df, palette = "Set2").set(title='Distribution of target variable')

prof = ProfileReport(df)
prof

prof.to_file(output_file='profile_gc4.html')

pip install h2o

import h2o
h2o.init()

from h2o.automl import H2OAutoML

fd = h2o.H2OFrame(df)

train, test = train_test_split(df, test_size=0.3, random_state=42, stratify = df['Drug'])

train, test = h2o.H2OFrame(train), h2o.H2OFrame(test)

x = train.columns
y = "Drug"
x.remove(y)

train[y] = train[y].asfactor()
test[y] = test[y].asfactor()

aml = H2OAutoML(max_models=15, seed=2, exclude_algos = ['StackedEnsemble'])
aml.train(x=x, y=y, training_frame=train)

lb = aml.leaderboard
lb.head(rows=lb.nrows)  # Print all rows instead of default (10 rows)

best_model = aml.get_best_model() # Get the best model

print(lb.head(1))

pip install scikit-plot

# working on the best model
import scikitplot as skplt
from sklearn.metrics import accuracy_score, classification_report
from sklearn.metrics import cohen_kappa_score, confusion_matrix
import matplotlib.pyplot as plt

# Predict with the best model.
#predicted_y = aml.leader.predict(test[x])
predicted_y = aml.predict(test[x])
predicted_data = predicted_y.as_data_frame()
valid_dataset = test.as_data_frame()

# Evaluate the skill of the Trained model using sklearn
acc                 = accuracy_score(valid_dataset[y], predicted_data['predict'])
classReport         = classification_report(valid_dataset[y], predicted_data['predict'])
confMatrix          = confusion_matrix(valid_dataset[y], predicted_data['predict'])

print(); print('Testing Results of the trained model: ')
print(); print('Accuracy : ', acc)
print(); print('Confusion Matrix :\n', confMatrix)
print(); print('Classification Report :\n',classReport)
skplt.metrics.plot_confusion_matrix(valid_dataset[y], predicted_data['predict'], figsize=(7,7)); plt.show()